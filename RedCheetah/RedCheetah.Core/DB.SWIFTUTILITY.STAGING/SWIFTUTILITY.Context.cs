//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RedCheetah.Core.DB.SWIFTUTILITY.STAGING
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SwiftUtilityEntities : DbContext
    {
        public SwiftUtilityEntities()
            : base("name=SwiftUtilityEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Auto_Allocate_Subscribers> Auto_Allocate_Subscribers { get; set; }
        public virtual DbSet<AutoAllocation_Transactions> AutoAllocation_Transactions { get; set; }
        public virtual DbSet<Batch> Batches { get; set; }
        public virtual DbSet<BiometricsBonu> BiometricsBonus { get; set; }
        public virtual DbSet<Bonus> Bonuses { get; set; }
        public virtual DbSet<BulkSMS_EmailLogs> BulkSMS_EmailLogs { get; set; }
        public virtual DbSet<BulkVoucherDenomination> BulkVoucherDenominations { get; set; }
        public virtual DbSet<BulkVoucherFulfilment> BulkVoucherFulfilments { get; set; }
        public virtual DbSet<BulkVoucherPurchaser> BulkVoucherPurchasers { get; set; }
        public virtual DbSet<coveragemap> coveragemaps { get; set; }
        public virtual DbSet<CreditAccountExtension> CreditAccountExtensions { get; set; }
        public virtual DbSet<CRMFailedPayment> CRMFailedPayments { get; set; }
        public virtual DbSet<CRMLoansRepayment> CRMLoansRepayments { get; set; }
        public virtual DbSet<CrmParameter> CrmParameters { get; set; }
        public virtual DbSet<CRMPayment> CRMPayments { get; set; }
        public virtual DbSet<Customer_BlockUnblock> Customer_BlockUnblock { get; set; }
        public virtual DbSet<Customer_Reminders> Customer_Reminders { get; set; }
        public virtual DbSet<CustomerEmailChanx> CustomerEmailChanges { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Customers_LastPayments> Customers_LastPayments { get; set; }
        public virtual DbSet<customers_lock> customers_lock { get; set; }
        public virtual DbSet<CustomersEmailMessageLog> CustomersEmailMessageLogs { get; set; }
        public virtual DbSet<CustomersEmailMessageLogs_BackUp> CustomersEmailMessageLogs_BackUp { get; set; }
        public virtual DbSet<DebitAccountsNotification> DebitAccountsNotifications { get; set; }
        public virtual DbSet<ExpirationDate_InvalidExtensions> ExpirationDate_InvalidExtensions { get; set; }
        public virtual DbSet<FailedPayments_Feb1to52013> FailedPayments_Feb1to52013 { get; set; }
        public virtual DbSet<FailedPortaOneTransactionNote> FailedPortaOneTransactionNotes { get; set; }
        public virtual DbSet<HotSpotPayment> HotSpotPayments { get; set; }
        public virtual DbSet<InternetTest_Feedback> InternetTest_Feedback { get; set; }
        public virtual DbSet<InterSwitch_Data> InterSwitch_Data { get; set; }
        public virtual DbSet<Interswitch_Paydirect> Interswitch_Paydirect { get; set; }
        public virtual DbSet<IrokoTVCode_Exceptions> IrokoTVCode_Exceptions { get; set; }
        public virtual DbSet<IrokoTVCode> IrokoTVCodes { get; set; }
        public virtual DbSet<IVRPayment> IVRPayments { get; set; }
        public virtual DbSet<KYCBlockUnbock> KYCBlockUnbocks { get; set; }
        public virtual DbSet<KYCDeferment> KYCDeferments { get; set; }
        public virtual DbSet<KYCUpload> KYCUploads { get; set; }
        public virtual DbSet<LTEFUTFeedback> LTEFUTFeedbacks { get; set; }
        public virtual DbSet<mobilepayment> mobilepayments { get; set; }
        public virtual DbSet<ModemCost> ModemCosts { get; set; }
        public virtual DbSet<OnlineCustomerEntry> OnlineCustomerEntries { get; set; }
        public virtual DbSet<onlinepayment> onlinepayments { get; set; }
        public virtual DbSet<onlinepayment_backup> onlinepayment_backup { get; set; }
        public virtual DbSet<OnlineSession> OnlineSessions { get; set; }
        public virtual DbSet<PartnerLogin> PartnerLogins { get; set; }
        public virtual DbSet<pop> pops { get; set; }
        public virtual DbSet<pops_old> pops_old { get; set; }
        public virtual DbSet<PortaOneQuery> PortaOneQueries { get; set; }
        public virtual DbSet<PortaOneSession> PortaOneSessions { get; set; }
        public virtual DbSet<PortaOneTransactionNote> PortaOneTransactionNotes { get; set; }
        public virtual DbSet<ProductIdealFor> ProductIdealFors { get; set; }
        public virtual DbSet<ProductTiming> ProductTimings { get; set; }
        public virtual DbSet<PromoDetail> PromoDetails { get; set; }
        public virtual DbSet<PromoPartner> PromoPartners { get; set; }
        public virtual DbSet<PromoPlansExclusionList> PromoPlansExclusionLists { get; set; }
        public virtual DbSet<ReceiptDetail> ReceiptDetails { get; set; }
        public virtual DbSet<ReceiptNumber> ReceiptNumbers { get; set; }
        public virtual DbSet<Referral> Referrals { get; set; }
        public virtual DbSet<ServicePlanChanx> ServicePlanChanges { get; set; }
        public virtual DbSet<ServiceSchedule> ServiceSchedules { get; set; }
        public virtual DbSet<SignUp_Exceptionals> SignUp_Exceptionals { get; set; }
        public virtual DbSet<SMSSender> SMSSenders { get; set; }
        public virtual DbSet<SMSSender_Backup> SMSSender_Backup { get; set; }
        public virtual DbSet<SMSSender_Checker> SMSSender_Checker { get; set; }
        public virtual DbSet<Special_Discount_Products> Special_Discount_Products { get; set; }
        public virtual DbSet<swift_staff_accounts> swift_staff_accounts { get; set; }
        public virtual DbSet<swift_staff_internet> swift_staff_internet { get; set; }
        public virtual DbSet<SwiftDay_Subscribers> SwiftDay_Subscribers { get; set; }
        public virtual DbSet<SwiftISWErrorLog> SwiftISWErrorLogs { get; set; }
        public virtual DbSet<SwiftISWFailedPayment> SwiftISWFailedPayments { get; set; }
        public virtual DbSet<SwiftISWPayment> SwiftISWPayments { get; set; }
        public virtual DbSet<SwiftISWPayment_Codes> SwiftISWPayment_Codes { get; set; }
        public virtual DbSet<SwiftISWPaymentItem> SwiftISWPaymentItems { get; set; }
        public virtual DbSet<SwiftISWRequeryLog> SwiftISWRequeryLogs { get; set; }
        public virtual DbSet<SystemParameter> SystemParameters { get; set; }
        public virtual DbSet<tbl_ModemName> tbl_ModemName { get; set; }
        public virtual DbSet<TermsandConditionsRespons> TermsandConditionsResponses { get; set; }
        public virtual DbSet<Timer_Reminders> Timer_Reminders { get; set; }
        public virtual DbSet<TransactionHistory> TransactionHistories { get; set; }
        public virtual DbSet<voip_plan_mapping> voip_plan_mapping { get; set; }
        public virtual DbSet<VOIPRelease_Reminders> VOIPRelease_Reminders { get; set; }
        public virtual DbSet<Voucher> Vouchers { get; set; }
        public virtual DbSet<BiometricsBonusService> BiometricsBonusServices { get; set; }
        public virtual DbSet<DebitAccountsEmailAlertsCheck> DebitAccountsEmailAlertsChecks { get; set; }
        public virtual DbSet<HotlinedFundedAccountsSessionExtension> HotlinedFundedAccountsSessionExtensions { get; set; }
        public virtual DbSet<KYCRejectReason> KYCRejectReasons { get; set; }
        public virtual DbSet<LogonServersLog> LogonServersLogs { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Products_View_Mapping> Products_View_Mapping { get; set; }
        public virtual DbSet<SIMSInventory> SIMSInventories { get; set; }
        public virtual DbSet<SwiftISWRequestLog> SwiftISWRequestLogs { get; set; }
        public virtual DbSet<vwCheck_for_Vouchers> vwCheck_for_Vouchers { get; set; }
        public virtual DbSet<vwCustomersEmailMessageLog> vwCustomersEmailMessageLogs { get; set; }
        public virtual DbSet<vwonlinepayment> vwonlinepayments { get; set; }
        public virtual DbSet<vwSMSSender> vwSMSSenders { get; set; }
    
        public virtual ObjectResult<CCPoratal_LoadPostponementbyDate_Result> CCPoratal_LoadPostponementbyDate(Nullable<int> days, string exactdate)
        {
            var daysParameter = days.HasValue ?
                new ObjectParameter("days", days) :
                new ObjectParameter("days", typeof(int));
    
            var exactdateParameter = exactdate != null ?
                new ObjectParameter("exactdate", exactdate) :
                new ObjectParameter("exactdate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CCPoratal_LoadPostponementbyDate_Result>("CCPoratal_LoadPostponementbyDate", daysParameter, exactdateParameter);
        }
    
        public virtual int fetch_ExpiredKYC(Nullable<int> customerid, Nullable<int> days, Nullable<int> accumulate)
        {
            var customeridParameter = customerid.HasValue ?
                new ObjectParameter("customerid", customerid) :
                new ObjectParameter("customerid", typeof(int));
    
            var daysParameter = days.HasValue ?
                new ObjectParameter("days", days) :
                new ObjectParameter("days", typeof(int));
    
            var accumulateParameter = accumulate.HasValue ?
                new ObjectParameter("accumulate", accumulate) :
                new ObjectParameter("accumulate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("fetch_ExpiredKYC", customeridParameter, daysParameter, accumulateParameter);
        }
    
        public virtual ObjectResult<LoadPostponementbyDate_Result> LoadPostponementbyDate(Nullable<int> days)
        {
            var daysParameter = days.HasValue ?
                new ObjectParameter("days", days) :
                new ObjectParameter("days", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoadPostponementbyDate_Result>("LoadPostponementbyDate", daysParameter);
        }
    
        public virtual ObjectResult<string> PortaOneTransactionNotes_FormUID(string uid, string paymentCategory, string paymentType, string source, string partner, string transID, string parentID)
        {
            var uidParameter = uid != null ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(string));
    
            var paymentCategoryParameter = paymentCategory != null ?
                new ObjectParameter("paymentCategory", paymentCategory) :
                new ObjectParameter("paymentCategory", typeof(string));
    
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("paymentType", paymentType) :
                new ObjectParameter("paymentType", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("source", source) :
                new ObjectParameter("source", typeof(string));
    
            var partnerParameter = partner != null ?
                new ObjectParameter("partner", partner) :
                new ObjectParameter("partner", typeof(string));
    
            var transIDParameter = transID != null ?
                new ObjectParameter("transID", transID) :
                new ObjectParameter("transID", typeof(string));
    
            var parentIDParameter = parentID != null ?
                new ObjectParameter("parentID", parentID) :
                new ObjectParameter("parentID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PortaOneTransactionNotes_FormUID", uidParameter, paymentCategoryParameter, paymentTypeParameter, sourceParameter, partnerParameter, transIDParameter, parentIDParameter);
        }
    }
}
